---
- name: Create RHEL instances in AWS
  hosts: localhost
  connection: local
  gather_facts: false
  vars:
    count: 4
    instance_names:
      - rhel-AIserver
      - rhel-APPserver
      - rhel-WEBserver
      - rhel-DBserver
  tasks:
    # Using ec2_ami_facts allows us to find a particular ami instance id regardless of region
    # Look for owner 309956199498 to find official Red Hat AMIs
    - name: Find ami instance-id for RHEL
      amazon.aws.ec2_ami_info:
        region: "{{ ec2_region | default('us-east-2') }}"
        owners: 309956199498
        filters:
          name: "RHEL-8*HVM-*Hourly*"
          architecture: x86_64
      register: amis

    # The module ec2_ami_facts can return multiple ami instances for a given search
    # we will grab the latest instance (by date) that meets our criteria
    - name: Set AMI for RHEL
      ansible.builtin.set_fact:
        rhel_ami: >
          {{ amis.images | selectattr('name', 'defined') | sort(attribute='creation_date') | last }}

    - name: Retrieve VPC subnet id
      amazon.aws.ec2_vpc_subnet_info:
        region: "{{ ec2_region | default('us-east-2') }}"
        filters:
          "tag:Name": "{{ ec2_vpc_subnet_name | default('public') }}"
      register: ec2_vpc_subnet_id

    - name: Debug ec2_vpc_subnet_name
      ansible.builtin.debug:
        msg: "{{ ec2_vpc_subnet_id }}"

    - name: Create EC2 instances for the demo.
      amazon.aws.ec2_instance:
        name: "{{ item.0 + 1 }}"
        key_name: "{{ ec2_key_name | default('hmsshkey') }}"
        security_group: "{{ ec2_security_group | default('ansible-aas-sg') }}"
        instance_type: "{{ ec2_instance_type | default('t2.micro') }}"
        image_id: "{{ rhel_ami.image_id }}"
        region: "{{ ec2_region | default('us-east-2') }}"
        exact_count: "{{ count | default('1') }}"
        state: running
        filters:
          instance-state-name: running
        tags:
          ansible-demo: "true"
          Name: "{{ item }}"
        network:
          assign_public_ip: true
        vpc_subnet_id: "{{ ec2_vpc_subnet_id.subnets[0].subnet_id }}"
        volumes:
          - device_name: /dev/sda1
            ebs:
              volume_type: "{{ ec2_volume_type | default('gp3') }}"
              volume_size: "{{ ec2_volume_size | default('40') }}"
              iops: "{{ ec2_iops | default('3000') }}"
              throughput: "{{ ec2_throughput | default('125') }}"
              delete_on_termination: "{{ delete_on_termination | default(True) }}"
      loop: "{{ instance_names }}"
      register: control_output

    - name: Grab instance ids to tag them all
      amazon.aws.ec2_instance_info:
        region: "{{ ec2_region | default('us-east-2') }}"
        filters:
          instance-state-name: running
          "tag:ansible-demo": "true"
      register: control_output

    - name: Ensure tags are present
      amazon.aws.ec2_tag:
        region: "{{ ec2_region | default('us-east-2') }}"
        resource: "{{ item.1.instance_id }}"
        state: present
        tags:
          Name: "{{ item.0 + 1 }}"
          Index: "{{ item[0] }}"
          launch_time: "{{ item.1.launch_time }}"
      with_indexed_items:
        - "{{ control_output.instances }}"
      when: control_output.instances | length > 0
